@mixin b64($val, $type: 'png') {
    background-image: url('data:image/#{$type};base64,#{$val}');
}

@mixin fz($val) {
    font-size: $val / $font_size_default + rem;
}

@mixin center() {
    position: absolute;
    top: 0;
    right: 0;
    bottom: 0;
    left: 0;
    display: inline-block;
    margin: auto;
}

@mixin clearfix() {
    &:before,
        &:after {
        content: " "; // 1
        display: table; // 2
    }
    &:after {
        clear: both;
    }
}

@mixin flex-item($items, $mr) {
    flex-grow: 0;
    flex-shrink: 1;
    margin-right: #{$mr};
    margin-bottom: #{$mr};
    flex-basis: calc(100% / #{$items} - (#{$mr} * (#{$items} - 1)) / #{$items});
    max-width: calc(100% / #{$items} - (#{$mr} * (#{$items} - 1)) / #{$items});
    &:nth-child(#{$items + 1}n) {
        margin-right: #{$mr};
    }
    &:nth-child(#{$items}n) {
        margin-right: 0;
    }
}


@mixin picture($padding-top, $object-fit) {
    padding-top: $padding-top * 1%;
    overflow: hidden;
    position: relative;
    & > img, picture, video {
        position: absolute;
        width: 100%;
        height: 100%;
        top: 0;
        left: 0;
        object-fit: $object-fit;
    }
}
@mixin picture2($padding-top, $object-fit) {
    padding-top: $padding-top * 1%;
    overflow: hidden;
    position: relative;
    picture, img {
        position: absolute;
        width: 100%;
        height: 100%;
        top: 0;
        left: 0;
        object-fit: $object-fit;
    }
}
@mixin h-n($fz, $lh) {
    font-weight: bold;
    font-size: #{$fz};
    line-height: #{$lh};
    letter-spacing: -1px;
}
@mixin text($fz, $lh, $ttu) {
    font-size: #{$fz};
    line-height: #{$lh};
    text-transform: #{$ttu};
}
@mixin label() {
    font-size: $font_size;
    line-height: 16px;
}

$max-breakpoint: 1800;




// This could be one of your media query breakpoint variables
$wide-screen: "(max-width: #{$max-breakpoint}px)"; 

// Function
@function get-vw($target) {
  // 1 vw is equal to 1% of the viewport width
  $vw-context: ($max-breakpoint * .01) * 1px; // 1% viewport width
  @return ($target/$vw-context) * 1vw;
}

// Mixin
@mixin vw($attr, $size) {
  #{$attr}: get-vw($size);
  @media #{$wide-screen} {
    #{$attr}: $size;
  }
}

@mixin m-custom-h($mah){
    @media (max-height: $mah) {
        @content
    }
}
@mixin m-desktop-small(){
    @media (max-width: 1650px) {
        @content
    }
}
@mixin m-laptop(){
    @media (max-width: 1439px) {
        @content
    }
}
@mixin m-tablet-wide(){
    @media (max-width: 1169px) {
        @content
    }
}
@mixin m-tablet-min(){
    @media (min-width: 1024px) {
        @content
    }
}
@mixin m-tablet(){
    @media (max-width: 1023px) {
        @content
    }
}
@mixin m-phone(){
    @media (max-width: 767px) {
        @content
    }
}
@mixin m-phone-max(){
    @media (max-width: 767px) and (min-width: 376px) {
        @content
    }
}
@mixin m-custom($maw){
    @media (max-width: $maw) {
        @content
    }
}
@mixin hover(){
    @media (min-width: 768px) {
        &:hover {
            @content
        }
    }
}

//медиазапрос от и до
@mixin media($min, $max){
    @if ($min == 0) {
        @media (max-width: $max) {
            @content
        }
    }
    @else if ($max == 0) {
        @media (min-width: $min) {
            @content
        }
    }
    @else {
        @media (min-width: $min) and (max-width: $max) {
            @content
        }
    }
}
@mixin responsive-table($thead-title...) {

    table { 
      width: 100%; 
      border-collapse: collapse; 
    }

    @media only screen and (max-width: 760px), (min-device-width: 768px) and (max-device-width: 1024px)  {

    /* Force table to not be like tables anymore */
    table, thead, tbody, th, td, tr { 
        display: block; 
    }
    
    /* Hide table headers (but not display: none;, for accessibility) */
    thead tr { 
        position: absolute;
        top: -9999px;
        left: -9999px;
        &:nth-child(1){
            border: none;
        }
    }
    
    tr { 
        border: 1px solid #ccc;
        margin-bottom: 20px;
        &:nth-child(1){
            border: none;
        } 
    }
    
    td { 
        /* Behave  like a "row" */
        border: none;
        border-bottom: 1px solid #eee; 
        position: relative;
        padding-left: 150px;
        height: inherit;
        padding-top: 15px;
        padding-bottom: 25px;
        &:last-child{
            padding-left: 0;
            text-align: center;
        }
        
    }
    
    td:before { 
        /* Now like a table header */
        position: absolute;
        /* Top/left values mimic padding */
        top: 14px;
        left: 10px;
        width: 100%;
        max-width: 130px;
        padding-right: 10px; 
        font-weight: bold;
    }

    @for $i from 1 through length($thead-title) {
      td:nth-of-type(#{$i}):before {
        content: nth($thead-title, $i);
      } 
    }

}
}